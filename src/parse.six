module _ = 'underscore'

import stream from './parse/stream'
import {Tuple, Variant, Member} from './parse/storage'
import {sequence, lexeme} from './parse/sequence'
import {Node, node, member} from './parse/node'
import {range, notChar, char, Char, whitespace} from './parse/char'
import {plus, plusLex, star, starLex, join,
        joinLex, joinPlus, joinPlusLex} from './parse/repetition'
import or from './parse/or'
import {test, testNot, not} from './parse/predicate'
import {treePlus, treePlusLex,
        treeJoin, treeJoinLex,
        treeSequence, treeOptional} from './parse/tree'
import grammar from './parse/grammar'

//////////////////////////////////////////////////////////////////////////////
// re-export stuff
export stream,
       Tuple, Variant, Member,
       sequence, lexeme,
       Node, node, member,
       range, notChar, char, Char, whitespace,
       plus, plusLex, star, starLex, join, joinLex, joinPlus, joinPlusLex,
       or,
       test, testNot, not,
       treePlus, treePlusLex,
       treeJoin, treeJoinLex,
       treeSequence, treeOptional,
       grammar

// Flags for parsers
//    constant = true        -> what parser skips is always the same
//    stores   = char/String -> only for char/String storing parsers

////////////////////////////////////////////////////////////////////////////
// base parse classes
//////////////////////////////////////////////////////////////////////////////
// Parse classes

export var parse = (spacing, grammar, src) =>
  stream(spacing).parse(grammar, src)
