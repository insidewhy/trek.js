import makeSeq from './sequence'
import or from './or'

class ParseTreePlus {
  constructor(parser) { this.parser = parser }

  parse(stream) {
    var ast = this.parser.parse(stream)

    if (! ast)
      return null

    if (stream.empty) return ast

    stream.skipWhitespace()

    var newAst = this.parser.parse(stream)
    if (! newAst)
      return ast

    var ret = [ ast ]
    do {
      ret.push(newAst)
      stream.skipWhitespace()
      if (stream.empty) return ret
    }
    while (newAst = this.parser.parse(stream))

    return ret
  }

  skip(stream) {
    if (! this.parser.skip(stream))
      return false

    do {
      stream.skipWhitespace()
      if (stream.empty) return true
    }
    while (this.parser.skip(stream))

    return true
  }
}

class ParseTreePlusLex {
  constructor(parser) { this.parser = parser }

  parse(stream) {
    var ast = this.parser.parse(stream)

    if (! ast)
      return null

    if (stream.empty) return ast

    var newAst = this.parser.parse(stream)
    if (! newAst)
      return ast

    var ret = [ ast ]
    do {
      ret.push(newAst)
      if (stream.empty) return ret
    }
    while (newAst = this.parser.parse(stream))

    return ret
  }

  skip(stream) {
    if (! this.parser.skip(stream))
      return false

    while (this.parser.skip(stream) && ! stream.empty) {}
    return true
  }
}

export function treePlus(...parsers) {
  return new ParseTreePlus(makeSeq(parsers))
}

export function treePlusLex(...parsers) {
  return new ParseTreePlusLex(makeSeq(parsers))
}

class ParseTreeJoin {
  constructor(joinParser, parser) {
    this.atLeastOne = atLeastOne
    this.joinParser = joinParser
    this.parser = parser
  }

  // TODO:
}

class ParseTreeJoinLex {
  constructor(joinParser, parser) {
    this.joinParser = joinParser
    this.parser = parser
  }

  // TODO:
}

//////////////////////////////////////////////////////////////////////////////
export function treeJoinPlus(joinParser, ...parsers) {
  return new ParseTreeJoin(joinParser, makeSeq(parsers))
}

export function treeJoinPlusLex(joinParser, ...parsers) {
  return new ParseTreeJoinLex(joinParser, makeSeq(parsers))
}

//////////////////////////////////////////////////////////////////////////////
class ParseTreeOptional {
  constructor(parser) { this.parser = parser }
}

export function treeOptional(...parsers) {
  return new ParseTreeOptional(makeSeq(parsers))
}

class ParseTreeSequence {
  constructor(parsers) {
    var withOptional = parsers.map(parser =>
      (parser instanceof ParseTreeOptional) ? parser.parser : parser)

    var withoutOptional = parsers.filter(
      parser => ! (parser instanceof ParseTreeOptional))

    this.parser = or(makeSeq(withOptional), makeSeq(withoutOptional))
  }

  get withOptional()    { return this.parser.choices[0] }
  get withoutOptional() { return this.parser.choices[1] }

  skip(stream)  { return this.parser.skip(stream) }
  parse(stream) { return this.parser.parse(stream) }
}


export function treeSequence(...parsers) {
  return new ParseTreeSequence(parsers)
}
