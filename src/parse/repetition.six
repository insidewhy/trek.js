import makeSeq from './sequence'
import StoresString from './string'
import Char from './char'

class ParseMany {
  constructor(atLeastOne, parser) {
    this.atLeastOne = atLeastOne
    this.parser = parser
  }

  parse(stream) {
    var ret = [],
        ast = this.parser.parse(stream)

    if (! ast)
      return this.atLeastOne ? null : []

    ret.push(ast)
    stream.skipWhitespace()
    if (stream.empty) return ret

    while (ast = this.parser.parse(stream)) {
      ret.push(ast)
      stream.skipWhitespace()
      if (stream.empty) return ret
    }

    return ret
  }

  skip(stream) {
    if (! this.parser.skip(stream))
      return this.atLeastOne ? true : false

    stream.skipWhitespace()
    if (stream.empty) return true

    while (this.parser.skip(stream)) {
      stream.skipWhitespace()
      if (stream.empty) return true
    }

    return true
  }
}

class ParseManyLex extends StoresString {
  constructor(atLeastOne, parser) {
    super()
    this.atLeastOne = atLeastOne
    this.parser = parser
  }

  skip(stream) {
    if (stream.empty || ! this.parser.skip(stream))
      return ! this.atLeastOne

    while (! stream.empty && this.parser.skip(stream)) {}
    return true
  }
}

function many(atLeastOne, lex, parser) {
  return lex ? new ParseManyLex(atLeastOne, parser) :
    parser.stores === Char ? new ParseManyLex(atLeastOne, parser) :
                             new ParseMany(atLeastOne, parser)
}

export function star() { return many(false, false, makeSeq(arguments)) }
export function starLex() { return many(false, true, makeSeq(arguments)) }
export function plus() { return many(true, false, makeSeq(arguments)) }
export function plusLex() { return many(true, true, makeSeq(arguments)) }
