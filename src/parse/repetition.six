import makeSeq from './sequence'
import {StoresString, makeParser} from './string'
import Char from './char'

//////////////////////////////////////////////////////////////////////////////
// many: plus/star
class ParseMany {
  constructor(atLeastOne, parser) {
    this.atLeastOne = atLeastOne
    this.parser = parser
  }

  parse(stream) {
    var ret = [],
        ast = this.parser.parse(stream)

    if (! ast)
      return this.atLeastOne ? null : []

    do {
      ret.push(ast)
      stream.skipWhitespace()
      if (stream.empty) return ret
    }
    while (ast = this.parser.parse(stream))

    return ret
  }

  skip(stream) {
    if (! this.parser.skip(stream))
      return ! this.atLeastOne

    do {
      stream.skipWhitespace()
      if (stream.empty) return true
    }
    while (this.parser.skip(stream))

    return true
  }
}

// plus/star Lex
class ParseManyLex extends StoresString {
  constructor(atLeastOne, parser) {
    super()
    this.atLeastOne = atLeastOne
    this.parser = parser
  }

  skip(stream) {
    if (stream.empty || ! this.parser.skip(stream))
      return ! this.atLeastOne

    while (! stream.empty && this.parser.skip(stream)) {}
    return true
  }
}

function many(atLeastOne, lex, parser) {
  return lex ? new ParseManyLex(atLeastOne, parser) :
    parser.stores === Char ? new ParseManyLex(atLeastOne, parser) :
                             new ParseMany(atLeastOne, parser)
}

export function star(...parsers){
  return many(false, false, makeSeq(parsers))
}

export function starLex(...parsers) {
  return many(false, true, makeSeq(parsers))
}

export function plus(...parsers) {
  return many(true, false, makeSeq(parsers))
}

export function plusLex(...parsers) {
  return many(true, true, makeSeq(parsers))
}

//////////////////////////////////////////////////////////////////////////////
// join
class ParseJoin {
  constructor(atLeastOne, joinParser, parser) {
    this.atLeastOne = atLeastOne
    this.joinParser = joinParser
    this.parser = parser
  }

  parse(stream) {
    var ret = [],
        ast = this.parser.parse(stream)

    if (! ast)
      return this.atLeastOne ? null : []

    ret.push(ast)
    var restore = stream.idx
    stream.skipWhitespace()
    if (stream.empty || ! this.joinParser.skip(stream)) {
      stream.idx = restore
      return ret
    }
    stream.skipWhitespace()

    for (;;) {
      if (! (ast = this.parser.parse(stream))) {
        stream.idx = restore
        return ret
      }
      ret.push(ast)
      restore = stream.idx
      stream.skipWhitespace()
      if (stream.empty || ! this.joinParser.skip(stream)) {
        stream.idx = restore
        return ret
      }
      stream.skipWhitespace()
    }
  }

  skip(stream) {
    if (! this.parser.skip(stream))
      return this.atLeastOne ? true : false

    var restore = stream.idx
    stream.skipWhitespace()
    if (stream.empty || ! this.joinParser.skip(stream)) {
      stream.idx = restore
      return true
    }
    stream.skipWhitespace()

    for (;;) {
      if (! this.parser.skip(stream)) {
        stream.idx = restore
        return true
      }

      restore = stream.idx
      stream.skipWhitespace()
      if (stream.empty || ! this.joinParser.skip(stream)) {
        stream.idx = restore
        return true
      }
      stream.skipWhitespace()
    }
  }
}

class ParseJoinLex {
  constructor(atLeastOne, joinParser, parser) {
    this.atLeastOne = atLeastOne
    this.joinParser = joinParser
    this.parser = parser
  }

  parse(stream) {
    var ret = [],
        ast = this.parser.parse(stream)

    if (! ast)
      return this.atLeastOne ? null : []

    ret.push(ast)
    if (stream.empty)
     return ret

    var restore = stream.idx
    if (! this.joinParser.skip(stream))
      return ret

    for (;;) {
      if (! (ast = this.parser.parse(stream))) {
        stream.idx = restore
        return ret
      }
      ret.push(ast)
      if (stream.empty)
        return ret

      // does not have to restore on join failure here unlike non-lex
      // version where the whitespace must be reversed.
      restore = stream.idx
      if (! this.joinParser.skip(stream))
        return ret
    }
  }

  skip(stream) {
    if (! this.parser.skip(stream))
      return ! this.atLeastOne

    if (stream.empty)
     return true

    var restore = stream.idx
    if (! this.joinParser.skip(stream))
      return true

    for (;;) {
      if (! this.parser.skip(stream)) {
        stream.idx = restore
        return true
      }
      if (stream.empty)
        return true

      restore = stream.idx

      if (! this.joinParser.skip(stream))
        return true
    }
  }
}


function joinHelper(atLeastOne, lex, joinParser, parser) {
  return lex ? new ParseJoinLex(atLeastOne, joinParser, parser) :
    parser.stores === Char ? new ParseJoinLex(atLeastOne, joinParser, parser) :
                             new ParseJoin(atLeastOne, joinParser, parser)
}

export function join(joinParser, ...parsers) {
  return joinHelper(false, false, makeParser(joinParser), makeSeq(parsers))
}

export function joinLex(joinParser, ...parsers) {
  return joinHelper(false, true, makeParser(joinParser), makeSeq(parsers))
}

export function joinPlus(joinParser, ...parsers) {
  return joinHelper(true, false, makeParser(joinParser), makeSeq(parsers))
}

export function joinPlusLex(joinParser, ...parsers) {
  return joinHelper(true, true, makeParser(joinParser), makeSeq(parsers))
}
