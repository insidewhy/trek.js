module _ = 'underscore'
import Char from './char'
import makeParser from './string'

export var Variant = 3

class ParseOr {
  constructor(choices) {
    this.choices = choices

    // if all subparsers store character storing parsers
    //   stores = Char
    // else if all subparsers store character or string storing parsers
    //   stores = String
    // else
    //   stores = Variant
    var stores

    var hasNonCharStr = _.find(choices, p => {
      var newStores = p.stores || p.skips

      if (newStores === String)
        stores = String
      else if (newStores === Char)
        stores = Char
      else {
        stores = null
        return true
      }
    })

    if (stores)
      this.stores = stores
    else
      this.stores = Variant
  }

  skip(stream) {
    var first = stream.idx

    for (var i = 0; i < this.choices.length; ++i) {
      if (this.choices[i].skip(stream))
        return true
    }

    return false
  }

  parse(stream) {
    var ast, first = stream.idx

    for (var i = 0; i < this.choices.length; ++i) {
      if (ast = this.choices[i].parse(stream))
        return ast

      stream.idx = first
    }

    return null
  }

}

export function or(...choices) {
  return new ParseOr(choices.map(makeParser))
}
