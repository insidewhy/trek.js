import {Char, whitespace} from './char'
import {ParseString, makeParser, StoresString} from './string'
import {Tuple, Member} from './storage'

module _ = 'underscore'

//////////////////////////////////////////////////////////////////////////////
// lexeme
class SkipParsers extends StoresString {
  constructor() {
    super()
    this.parsers = []
    this.stores = String
  }

  skip(stream) {
    var first = stream.idx
    if (_.find(this.parsers, p => ! p.skip(stream))) {
      stream.idx = first
      return false
    }
    return true
  }
}

class ParseLexeme {
  constructor(parsers) {
    this.tupleSize = 0

    this.parsers = parsers.map(p => {
      if (p.stores === null) {
        return (stream, ast) => p.skip(stream)
      }
      else if (p.stores === Tuple) {
        this.tupleSize += p.tupleSize
        return (stream, ast) => null !== p.parse(stream, ast)
      }
      else if (p.stores === Member) {
        if (! this.stores)
          this.stores = Member

        return (stream, ast) => null !== p.parse(stream, ast)
      }
      else {
        ++this.tupleSize

        // if it is the only storing parser then propogate to the
        // sequence otherwise it'll be overridden later in this method
        if (! this.stores || this.stores === Member)
          this.stores = p.stores

        return (stream, ast) => {
          var ret
          if (ret = p.parse(stream)) {
            ast.push(ret)
            return true
          }
          else return false
        }
      }
    })

    if (this.tupleSize > 1)
      this.stores = Tuple
    // else already set earlier

    this.skippers = parsers.map(p => stream => p.skip(stream))
  }

  parse(stream, ast) {
    var first = stream.idx
    if (! ast)
      ast = []
    for (var idx in this.parsers) {
      if (! this.parsers[idx](stream, ast)) {
        stream.idx = first
        return null
      }
    }
    return ast.length === 1 ? ast[0] : ast
  }

  skip(stream) {
    return ! _.find(this.skippers, s => ! s(stream))
  }
}

function lexemeHelper(parsers) {
  // TODO: if only single storing parser, dispatch to alternate parser
  return new ParseLexeme(parsers)
}

export function lexeme(...parsers) {
  var parser,
      canBeJoined =
        p => p.stores === Char || p.stores === String,
      skipper

  // try to join string/char storing parsers together into longer
  // string storing parsers
  for (var i = 0; i < parsers.length - 1; ++i) {
    parser = parsers[i]
    if (canBeJoined(parser) && canBeJoined(parsers[i + 1])) {
      parsers[i] = skipper = new SkipParsers()
      skipper.parsers.push(parser)
      skipper.parsers.push(parsers[i + 1])

      parsers.splice(++i, 1)

      while (i < parsers.length) {
        parser = parsers[i]
        if (! canBeJoined(parser))
          break

        skipper.parsers.push(parser)
        parsers.splice(i)
      }
    }
    else {
      parsers[i] = makeParser(parsers[i])
    }
  }

  return 1 === parsers.length ?  parsers[0] : lexemeHelper(parsers)
}

//////////////////////////////////////////////////////////////////////////////
// sequence
export function sequence(...parsers) {
  var parsers = parsers.map(makeParser)
  if (1 == parsers.length)
    return parsers[0]

  var lexParsers = []
  for (var i = 0; i < parsers.length - 1; ++i) {
    lexParsers.push(parsers[i])
    lexParsers.push(whitespace)
  }

  lexParsers.push(parsers[parsers.length - 1])
  return lexemeHelper(lexParsers)
}

//////////////////////////////////////////////////////////////////////////////
// helper for other parsers that take multiple parsers to form a sequence
export function makeSeq(args) {
  if (1 === args.length)
    return makeParser(args[0])
  else
    return sequence.apply(this, args)
}
