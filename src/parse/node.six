import makeSeq from './sequence'
import {Member, Variant} from './storage'

// A node is a special type of AST element that can't be broken down by
// grammar rules. It may include range information.
export class Node {
  constructor(stream, type) {
    this.range = [ stream.idx ]
    this.type = type
  }

  end(stream) {
    this.range.push(stream.idx)
    return this
  }
}

//////////////////////////////////////////////////////////////////////////////
// parsers
class ParseNode {
  constructor(type, parser) {
    this.type = type
    if (parser)
      this.setParser(parser)
    this.stores = Node
  }

  setParser(parser) {
    // TODO: if parser does not store Member than redirect parse to
    //       version that stores in "value" member
    this.parser = parser.stores === Member ? parser : member("value", parser)
  }

  parse(stream) {
    var node = new Node(stream, this.type),
        backup = stream.node

    stream.node = node
    var ret = this.parser.parse(stream)
    stream.node = backup

    return ret && node.end(stream)
  }
}

class ParseMember {
  constructor(name, parser) {
    this.name = name
    this.parser = parser
    this.stores = Member

    if (this.parser.stores === Variant)
      this.parse = this.parseVariant
  }

  parseVariant(stream) {
    var ast = this.parser.parse(stream)
    if (ast) {
      if (ast !== Member)
        stream.node[this.name] = ast

      return Member
    }
    else return null
  }

  parse(stream) {
    // optimised for when subparser cannot store Member although
    // currently only test via Variant... doesn't probe into possible
    // variant values.
    var ast = this.parser.parse(stream)
    if (ast) {
      stream.node[this.name] = ast
      return Member
    }
    else return null
  }
}

//////////////////////////////////////////////////////////////////////////////
// factories
export var nodeTypes = {}

/// Create a new node or a reference to a currently existing or
/// potential future existing node of a given type.
/// @detail If node is called with a single parameter than a reference
///         to the existing (or possible future existing) node is returned.
///         If there are more parameters then a new node is created.
/// @arg type string type of node
/// @arg ...parsers optional parsers
export function node(type, ...parsers) {
  var node = nodeTypes[type]
  if (node) {
    if (parsers.length === 0) {
      // specific request for reference to this node
      return node
    }
    else if (node.parser !== undefined) {
      // already been called with arguments!
      throw new Error("attempt to redefine node of type: " + node.type)
    }
    else {
      // return referecene created by earlier request for reference to node.
      node.setParser(makeSeq(parsers))
      return node
    }
  }

  return (nodeTypes[type] =
            new ParseNode(type,
                          parsers.length ? makeSeq(parsers) : undefined))
}

export function member(name, ...parsers) {
  return new ParseMember(name, makeSeq(parsers))
}
