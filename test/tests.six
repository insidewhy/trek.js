import {expect, p, parse} from "./helper"

describe("repetition parsers", () => {
  // too early for testing, just using this for now
  it("parses many character ranges to form a string.", () => {
    var grammar = p.plus(p.range("az")),
        ast     = parse(grammar, "totoro")

    expect(ast).to.equal("totoro")
  })
})

describe("lexeme", () => {
  it("skips several constants to form a string.", () => {
    var grammar = p.lexeme(p.range("az"), p.notChar("_"), p.range("az")),
        ast     = parse(grammar, "m!h")

    expect(ast).to.equal("m!h")
  })

  it("skips a character and a string to form a string.", () => {
    // TODO:
  })
})

describe("or parser", () => {
  it("using or() over many character storing parsers acts as a parser", () => {
    var grammar = p.or(p.notChar("03"), p.notChar("69")),
        ast     = parse(grammar, "5")

    expect(grammar.stores).to.equal(p.char)
    expect(ast).to.equal("5")
  })
})

describe("node parsing", () => {
  it("parses into a node with range information.", () => {
    var grammar = p.node("Friend", p.member("name", p.plus(p.range("az")))),
        ast     = parse(grammar, "totoro")

    expect(ast.name).to.equal("totoro")
    expect(ast.type).to.equal("Friend")
  })
})
