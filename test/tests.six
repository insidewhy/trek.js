import {expect, p, parse, parsePartial} from "./helper"

describe("repetition parsers", () => {
  // too early for testing, just using this for now
  it("parses many character ranges stores a string.", () => {
    var grammar = p.plus(p.range("az")),
        ast     = parse(grammar, "totoro")

    expect(ast).to.equal("totoro")
  })

  it("parses many strings stores a list of strings.", () => {
    var grammar = p.plus(p.plus(p.range("az"))),
        ast     = parse(grammar, "my friend   totoro")

    expect(ast[0]).to.equal("my")
    expect(ast[2]).to.equal("totoro")
  })
})

describe("lexeme", () => {
  it("skips several constants to form a string.", () => {
    var grammar = p.lexeme(p.range("az"), p.notChar("_"), p.range("az")),
        ast     = parse(grammar, "m!h")

    expect(ast).to.equal("m!h")
  })

  it("skips a character and a string to form a string.", () => {
    var idFirst = p.or(p.range("az"), p.char("_$"))
    var grammar =
      p.plus(
        p.lexeme(idFirst, p.star(p.or(p.range("09"), idFirst))))

    var ast     = parse(grammar, "_ident$ $ident0r")
    expect(ast[0]).to.equal("_ident$")
    expect(ast[1]).to.equal("$ident0r")
  })
})

describe("or parser", () => {
  it("using or() over many char storing parsers, stores a char", () => {
    var grammar = p.or(p.notChar("03"), p.notChar("69")),
        ast     = parse(grammar, "5")
  })

  it("using or() over String and char storing parsers stores a String", () => {
    var grammar = p.or(p.range("AZ"), p.plus(p.range("az")))
    expect(grammar.stores).to.equal(String)

    expect(parsePartial(grammar, "Allo")).to.equal("A")
    expect(parsePartial(grammar, "alloFriend")).to.equal("allo")
  })

  it("using or() with lexeme() to form an identifier", () => {
    // TODO:
  })
})

describe("node parsing", () => {
  it("parses into a node with range information.", () => {
    var grammar = p.node("Friend", p.member("name", p.plus(p.range("az")))),
        ast     = parse(grammar, "totoro")

    expect(ast.name).to.equal("totoro")
    expect(ast.type).to.equal("Friend")
  })
})
