import {expect, p, parse, parsePartial, word} from "./helper"

describe("or parser", () => {
  it("using or() over many char storing parsers, stores a char", () => {
    var grammar = p.or(p.range("03"), p.char("a")),
        ast     = parse(grammar, "a")
  })

  it("using or() over String and char storing parsers stores a String", () => {
    var grammar = p.or(p.range("AZ"), word)
    expect(grammar.stores).to.equal(String)

    expect(parsePartial(grammar, "Allo")).to.equal("A")
    expect(parsePartial(grammar, "alloFriend")).to.equal("allo")
  })

  it("using or() over String and node parser to return varying type.", () => {
    var grammar = p.or(
      p.node("Friend", p.member("name", word)),
      p.plus(p.range("09")))

    expect(grammar.stores).to.equal(p.Variant)

    var ast = parse(grammar, "sisko")
    expect(ast.name).to.equal("sisko")
    ast = parse(grammar, "420")
    expect(ast).to.equal("420")
  })

  it("using or() over string and constant string.", () => {
    var grammar = p.or(p.range("09"), "Chindor"),
        ast = parse(grammar, "Chindor")

    expect(ast).to.equal("Chindor")

    ast = parse(grammar, "9")
    expect(ast).to.equal("9")
  })

  it("using or() over string and constant character.", () => {
    var grammar = p.or(p.range("09"), "c")

    expect(parse(grammar, "c")).to.equal("c")
    expect(parse(grammar, "9")).to.equal("9")
  })
})

