import {expect, p, parse, parsePartial, word} from "./helper"

describe("repetition parsers", () => {
  it("plus(characterRange) stores a string.", () => {
    var grammar = word,
        ast     = parse(grammar, "totoro")

    expect(ast).to.equal("totoro")
  })

  it("star(char) succeeds on empty data.", () => {
    var grammar = p.star(p.range("az")),
        ast     = parse(grammar, "")

    expect(ast).to.equal("")
  })

  it("plus(string) stores a list of strings.", () => {
    var grammar = p.plus(p.or(word, p.plus(p.range("09")))),
        ast     = parse(grammar, "my friend420   totoro")

    expect(ast).to.eql(["my", "friend", "420", "totoro"])
  })

  it("plusLex(string) stores a string.", () => {
    var grammar = p.plusLex(p.or(word, p.plus(p.range("09")))),
        ast     = parsePartial(grammar, "friend420isgood ohyeah")

    expect(ast).to.equal("friend420isgood")
  })

  it("join(char, string) stores a list of strings.", () => {
    var grammar = p.join(",", word),
        ast     = parse(grammar, "my,friend , barneys")

    expect(ast).to.eql(["my", "friend", "barneys"])
  })

  it("joinLex(char, string) stores a list of strings.", () => {
    var grammar = p.joinLex(",", word),
        ast     = parsePartial(grammar, "barneys,lounge , friend")

    expect(ast).to.eql(["barneys", "lounge"])
  })
})
