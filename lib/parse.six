module _ = 'underscore'

// Flags for parsers
//    constant = true        -> what parser skips is always the same
//    stores   = char/String -> only for char/String storing parsers

////////////////////////////////////////////////////////////////////////////
// base parse classes
class StoresChar {
  constructor() {
    this.stores = char
  }

  parse(stream) {
    if (this.match(stream)) {
      var front = stream.front
      ++stream.idx
      return front
    }
    else return null
  }

  skip(stream) {
    if (! this.match(stream))
      return false
    stream.inc()
    return true
  }
}

class StoresString {
  constructor() {
    this.stores = String
  }

  parse(stream) {
    var first = stream.idx
    if (this.skip(stream))
      return stream.from(first)

    stream.idx = first
    return null
  }
}

// A node is a special type of AST element that can't be broken down by
// grammar rules. It may include range information.
class Node {
  constructor(stream, type) {
    this.range = [ stream.idx ]
    this.type = type
  }

  end(stream) {
    this.range.push(stream.idx)
    return this
  }
}

//////////////////////////////////////////////////////////////////////////////
// Skip classes
class ParseString extends StoresString {
  constructor() {
    super()
    this.parsers = []
  }

  skip(stream) {
    var first = stream.idx
    if (_.find(this.parsers, p => ! p.skip(stream))) {
      stream.idx = first
      return false
    }
    return true
  }
}

//////////////////////////////////////////////////////////////////////////////
// Parse classes
class ParseRange extends StoresChar {
  constructor(range) {
    super()
    this.from = range[0]
    this.to = range[1]
  }

  match(stream) {
    return stream.front >= this.from && stream.front <= this.to
  }
}

class ParseNotChar extends StoresChar {
  constructor(chars) {
    super()
    this.chars = chars
  }

  match(stream) { return -1 === this.chars.indexOf(stream.front) }
}

class ParseChar extends StoresChar {
  constructor(chars) {
    super()
    this.chars = chars
  }

  match(stream) { return -1 !== this.chars.indexOf(stream.front) }
}

class ParseMany {
  constructor(atLeastOne, parser) {
    this.atLeastOne = atLeastOne
    this.parser = parser
  }

  parse(stream) {
    var ret = [],
        ast = this.parser.parse(stream)

    if (! ast)
      return this.atLeastOne ? null : []

    ret.push(ast)
    stream.skipWhitespace()
    if (stream.empty) return ret

    while (ast = this.parser.parse(stream)) {
      ret.push(ast)
      stream.skipWhitespace()
      if (stream.empty) return ret
    }

    return ret
  }
}

class ParseManyChar extends StoresString {
  constructor(atLeastOne, parser) {
    super()
    this.atLeastOne = atLeastOne
    this.parser = parser
  }

  skip(stream) {
    if (stream.empty || ! this.parser.skip(stream))
      return ! this.atLeastOne

    while (! stream.empty && this.parser.skip(stream)) {}
    return true
  }
}

class ParseOr {
  constructor(choices) {
    this.choices = choices

    // if all subparsers store character storing parsers
    //   stores = char
    // else if all subparsers store character or string storing parsers
    //   stores = string
    // else
    //   no stores
    var stores = null

    var hasNonCharStr = _.find(choices, p => {
      if (! p.stores) {
        stores = null
        return true
      }

      if (p.stores === String)
        stores = String
      else
        stores = char
    })

    if (stores)
      this.stores = stores
  }

  parse(stream) {
    var ast, first = stream.idx

    for (var i = 0; i < this.choices.length; ++i) {
      if (ast = this.choices[i].parse(stream))
        return ast

      stream.idx = first
    }

    return null
  }

}

//////////////////////////////////////////////////////////////////////////////
// node parsers
class ParseNode {
  constructor(type, parser) {
    this.type = type
    this.parser = parser
  }

  parse(stream) {
    var node = new Node(stream, this.type),
        backup = stream.node

    stream.node = node
    var ret = this.parser.parse(stream)
    stream.node = backup

    return ret && node.end(stream)
  }
}

class ParseMember {
  constructor(name, parser) {
    this.name = name
    this.parser = parser
  }

  parse(stream) {
    var ast = this.parser.parse(stream)
    return ast && (stream.node[this.name] = ast)
  }
}

////////////////////////////////////////////////////////////////////////////
// helper function
function makeSeq(args, offset) {
  if (! offset)
    offset = 0

  if (offset + 1 === args.length)
    return args[offset]
  else
    return sequence.apply(this, [].slice.call(args, offset))
}

////////////////////////////////////////////////////////////////////////////
// public factory functions

// Makes any parser act like a char parser such that it will be combined
// into ranges by parent parsers as if it was storing only a single character.
export function char(chars) {
  if (typeof chars === "string")
    return new ParseChar(chars)

  var parser = makeSeq(arguments)
  parser.stores = char
  return parser
}

// Parse any character that falls in between two other characters inclusive.
export function range(charRange) { return new ParseRange(charRange) }

// Parse any character not in "chars".
export function notChar(chars) { return new ParseNotChar(chars) }

export function star() { return many(false, makeSeq(arguments)) }
export function plus() { return many(true, makeSeq(arguments)) }

export function many() {
  var atLeastOne = arguments[0],
      parser     = makeSeq(arguments, 1)

  return parser.stores === char ?
    new ParseManyChar(atLeastOne, parser) : new ParseMany(atLeastOne, parser)
}

export function lexeme() {
  var parser,
      parsers = [].slice.call(arguments, 0),
      canBeJoined =
        p => !p.constant && (p.stores === char || p.stores === String),
      skipper,
      lexParsers = []

  // try to join string/char storing parsers together into longer
  // string storing parsers
  for (var i = 0; i < parsers.length - 1; ++i) {
    parser = parsers[i]
    if (canBeJoined(parser) && canBeJoined(parsers[i + 1])) {
      parsers[i] = skipper = new ParseString()
      skipper.parsers.push(parser)
      skipper.parsers.push(parsers[i + 1])

      parsers.splice(++i, 1)

      while (i < parsers.length) {
        parser = parsers[i]
        if (! canBeJoined(parser))
          break

        skipper.parsers.push(parser)
        parsers.splice(i)
      }
    }
  }

  return 1 === parsers.length ?  parsers[0] : new ParseLexeme(parsers)
}

export function or() {
  return new ParseOr([].slice.call(arguments, 0))
}

//////////////////////////////////////////////////////////////////////////////
// node stuff
export function node() {
  var type   = arguments[0]
  return new ParseNode(type, makeSeq(arguments, 1))
}

export function member() {
  var name   = arguments[0]
  return new ParseMember(name, makeSeq(arguments, 1))
}

//////////////////////////////////////////////////////////////////////////////
// stream stuff
class Stream {
  constructor(spacing) {
    this.spacing = spacing
  }

  inc() { ++this.idx }

  from(idx) {
    return this.source.substring(idx, this.idx)
  }

  get front() { return this.source[this.idx] }

  get empty() { return this.idx >= this.source.length }

  skipWhitespace() {
    this.spacing.skip(this)
  }

  parse(grammar, source) {
    this.idx = 0
    this.source = source

    // TODO: first skip whitepace

    // parse grammar
    var ast = grammar.parse(this)

    // TODO: skip whitespace
    // TODO: confirm is at end

    return ast
  }
}

export var stream = spacing => new Stream(spacing)

export var parse = (spacing, grammar, src) =>
  stream(spacing).parse(grammar, src)
