import makeSeq from './sequence'

// A node is a special type of AST element that can't be broken down by
// grammar rules. It may include range information.
class Node {
  constructor(stream, type) {
    this.range = [ stream.idx ]
    this.type = type
  }

  end(stream) {
    this.range.push(stream.idx)
    return this
  }
}

//////////////////////////////////////////////////////////////////////////////
// parsers
class ParseNode {
  constructor(type, parser) {
    this.type = type
    this.parser = parser
  }

  parse(stream) {
    var node = new Node(stream, this.type),
        backup = stream.node

    stream.node = node
    var ret = this.parser.parse(stream)
    stream.node = backup

    return ret && node.end(stream)
  }
}

class ParseMember {
  constructor(name, parser) {
    this.name = name
    this.parser = parser
  }

  parse(stream) {
    var ast = this.parser.parse(stream)
    return ast && (stream.node[this.name] = ast)
  }
}

//////////////////////////////////////////////////////////////////////////////
// factories
export function node() {
  var type   = arguments[0]
  return new ParseNode(type, makeSeq(arguments, 1))
}

export function member() {
  var name   = arguments[0]
  return new ParseMember(name, makeSeq(arguments, 1))
}
